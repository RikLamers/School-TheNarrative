@charset "UTF-8";

/* =============================================================================
CONFIG
============================================================================= */

/* =============================================================================
MIXIN: FRAMEWORK GRID GENERATION
DESCRIPTION: Used only by Bootstrap to generate the correct number of grid classes given
			any value of `$grid-columns`.
============================================================================= */

$columns: $grid-columns;
$gutter: $grid-gutter-width;
$breakpoints: $grid-breakpoints;

@mixin make-grid-columns($prefix, $display) {
	// Common properties for all breakpoints

	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px; // Prevent columns from collapsing when empty
		padding-right: ($gutter / 3.75);
		padding-left: ($gutter / 3.75);

		@media (min-width: breakpoint-min(md)) {
			padding-right: ($gutter / 3);
			padding-left: ($gutter / 3);
		}

		@media (min-width: breakpoint-min(lg)) {
			padding-right: ($gutter / 2);
			padding-left: ($gutter / 2);
		}
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		// Allow columns to stretch full width below their breakpoints
		@for $i from 1 through $columns {
			.#{$prefix}-col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}
		.#{$prefix}-col#{$infix},
		.#{$prefix}-col#{$infix}-auto {
			@extend %grid-column;
		}

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			//Pass on flex items if variable display is flex
			@if ($display == flex) {
				.#{$prefix}-col#{$infix} {
					flex-basis: 0;
					flex-grow: 1;
					max-width: 100%;
				}
				.#{$prefix}-col#{$infix}-auto {
					flex: 0 0 auto;
					width: auto;
					max-width: none; // Reset earlier grid tiers
				}
			}

			//Make a normal col if display is grid otherwise make flex cols
			@for $i from 1 through $columns {
				.#{$prefix}-col#{$infix}-#{$i} {
					@if ($display == grid) {
						@include make-col($i, $columns);
					}
					@if ($display == flex) {
						@include make-flex-col($i, $columns);
					}
				}

				.#{$prefix}-col#{$infix}-pull-#{$i} {
					@include make-col($i, $columns);
					@include make-col-pull($i, $columns);
				}

				.#{$prefix}-col#{$infix}-push-#{$i} {
					@include make-col($i, $columns);
					@include make-col-push($i, $columns);
				}
			}

			.#{$prefix}order#{$infix}-first {
				order: -1;
			}

			@for $i from 1 through $columns {
				.#{$prefix}-order#{$infix}-#{$i} {
					order: $i;
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not($infix == '' and $i == 0) {
					// Avoid emitting useless .offset-0
					.#{$prefix}-offset#{$infix}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}
